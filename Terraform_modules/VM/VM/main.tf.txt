module "os" {
  source    = "./os"
  os_simple = var.os_image_simple
}

data "azurerm_storage_account" "log_stg_account" {
  name                = var.diag_log_storage_account_name
  resource_group_name = var.diag_log_storage_account_rg
}

data "azurerm_key_vault_secret" "domain_join_secret" {
  provider     = azurerm.keyvault
  name         = var.ad_join_keyvault_secret
  key_vault_id = var.ad_join_keyvault_id
}

data "azuread_group" "storage_readers_group" {
  name = "azure-sta-stamrcitsoftwareeusp-reader"
}

locals {
  environment_type_map = {
    prod    = "p"
    qa      = "q"
    test    = "t"
    dev     = "d"
    sandbox = "x"
  }

  vm_last_char = substr(strrev(var.vm_name), 0, 1)

  assert_environment_type_tag_matches_vm_environment_suffix = local.vm_last_char != local.environment_type_map[var.tags["environmentType"]] ? file("ERROR: vm last character does not have match in environment_type_map") : null

  resolved_image = {
    publisher = coalesce(var.os_image_reference.publisher, module.os.calculated_value_os_image_publisher)
    offer     = coalesce(var.os_image_reference.offer, module.os.calculated_value_os_image_offer)
    sku       = coalesce(var.os_image_reference.sku, module.os.calculated_value_os_image_sku)
    version   = coalesce(var.os_image_reference.version, "Latest")
  }

  is_windows_publisher    = substr(local.resolved_image.publisher, 0, 16) == "MicrosoftWindows" ? true : false
  is_windows              = var.os_image_is_windows != "" ? var.os_image_is_windows : local.is_windows_publisher
  calculated_license_type = local.is_windows == false ? null : (local.resolved_image.publisher == "MicrosoftWindowsDesktop" ? "Windows_Client" : "Windows_Server")

  chef_script_variables = {
    chef_version = var.chef_bootstrap_version
    first_boot_json = jsonencode({
      run_list = var.chef_run_list
    })
    validation_key   = var.chef_secrets.validation_key
    validator_name   = var.chef_validation_client_name
    chef_server_url  = var.chef_server_url
    node_name        = var.vm_name
    data_bag_secret  = var.chef_secrets.data_bag_secret
    chef_environment = var.chef_environment
    policy_name      = var.chef_policy_name
    policy_group     = var.chef_policy_group
  }

  chef_script_retry_trigger = substr(replace(sha512(jsonencode(local.chef_script_variables)), "/[^\\d]/", ""), 0, 9)

  chef_lin_addtl_params = var.chef_use_policyfiles ? "-p '${var.chef_policy_name}' -g '${var.chef_policy_group}' -x 'true'" : "-e '${var.chef_environment}' -r '${var.chef_run_list}' "
  chef_win_addtl_params = var.chef_use_policyfiles ? "-UsePolicyfiles -PolicyName \"${var.chef_policy_name}\" -PolicyGroup \"${var.chef_policy_group}\" " : "-ChefEnvironment \"${var.chef_environment}\" -RunList \"${var.chef_run_list}\" "

  chef_install_script = {
    linux   = "./install_chef.sh -v '${var.chef_bootstrap_version}' -V '${var.chef_validation_client_name}' -u '${var.chef_server_url}' -n '${var.vm_name}' -d '${var.chef_secrets.data_bag_secret}' -k '${base64decode(var.chef_secrets.validation_key)}' ${local.chef_lin_addtl_params}"
    windows = "powershell.exe -Command ./Chef/Install-ChefClient.ps1 -Version \"${var.chef_bootstrap_version}\" -ValidatorName \"${var.chef_validation_client_name}\" -ChefServerUrl \"${var.chef_server_url}\" -NodeName \"${var.vm_name}.mcjunkinredman.com\" -EncryptedDataBagSecretKey \"${base64encode(var.chef_secrets.data_bag_secret)}\" -ValidationKey \"${var.chef_secrets.validation_key}\" ${local.chef_win_addtl_params}"
  }

  # Ugly hack for how Terraform handles indexing into missing resources
  #   https://github.com/hashicorp/terraform/issues/23222
  #   https://github.com/hashicorp/terraform/issues/23140
  linux_principle_id   = length(azurerm_linux_virtual_machine.linux_vm) > 0 ? (length(azurerm_linux_virtual_machine.linux_vm[0].identity) > 0 ? azurerm_linux_virtual_machine.linux_vm[0].identity[0].principal_id : null) : null
  windows_principle_id = length(azurerm_windows_virtual_machine.windows_vm) > 0 ? (length(azurerm_windows_virtual_machine.windows_vm[0].identity) > 0 ? azurerm_windows_virtual_machine.windows_vm[0].identity[0].principal_id : null) : null
  vm_principal_id      = local.is_windows ? local.windows_principle_id : local.linux_principle_id
}

resource "azurerm_windows_virtual_machine" "windows_vm" {
  count               = local.is_windows ? 1 : 0
  name                = var.vm_name
  location            = var.vm_location
  resource_group_name = var.vm_resource_group_name
  size                = var.vm_size
  network_interface_ids = [
    azurerm_network_interface.primary_network_interface.id
  ]
  license_type = coalesce(var.os_image_license_type, local.calculated_license_type)
  timezone     = var.timezone

  //noinspection ConflictingProperties (defaults to null which won't conflict with zone)
  availability_set_id = var.availability_set_id

  //noinspection ConflictingProperties (defaults to null which won't conflict with availability set)
  zone = var.availability_zone

  proximity_placement_group_id = var.proximity_placement_group_id

  identity {
    type         = var.managed_identity_ids != null && length(var.managed_identity_ids) > 0 ? "SystemAssigned, UserAssigned" : "SystemAssigned"
    identity_ids = var.managed_identity_ids != null && length(var.managed_identity_ids) > 0 ? var.managed_identity_ids : null
  }

  source_image_id = var.os_image_id

  //noinspection ConflictingProperties (only set if var.os_image_id is null so there is no conflict)
  dynamic "source_image_reference" {
    for_each = var.os_image_id == null ? [1] : []
    content {
      publisher = local.resolved_image.publisher
      sku       = local.resolved_image.sku
      offer     = local.resolved_image.offer
      version   = local.resolved_image.version
    }
  }

  dynamic "plan" {
    for_each = var.vm_plan_name != null ? [1] : []
    content {
      publisher = local.resolved_image.publisher
      product   = local.resolved_image.offer
      name      = var.vm_plan_name
    }
  }

  provision_vm_agent = true

  boot_diagnostics {
    storage_account_uri = data.azurerm_storage_account.log_stg_account.primary_blob_endpoint
  }

  os_disk {
    name                   = "${var.vm_name}-osdisk"
    caching                = "ReadWrite"
    disk_size_gb           = var.os_disk_size_gb
    storage_account_type   = var.os_disk_sku
    disk_encryption_set_id = var.disk_encryption_set_id
  }

  admin_username = var.admin_username
  admin_password = var.admin_password

  # Set the allow extension operations property
  allow_extension_operations = true

  tags = var.tags

  # For import ignore this setting. Older VM's have this set to NULL and any attempt to update it has failed so far
  lifecycle {
    ignore_changes = [allow_extension_operations]
  }
}

resource "azurerm_linux_virtual_machine" "linux_vm" {
  count               = local.is_windows ? 0 : 1
  name                = var.vm_name
  location            = var.vm_location
  resource_group_name = var.vm_resource_group_name
  size                = var.vm_size
  network_interface_ids = [
    azurerm_network_interface.primary_network_interface.id
  ]

  //noinspection ConflictingProperties (defaults to null which won't conflict with zone)
  availability_set_id = var.availability_set_id

  //noinspection ConflictingProperties (defaults to null which won't conflict with availability set)
  zone = var.availability_zone

  proximity_placement_group_id = var.proximity_placement_group_id

  identity {
    type         = var.managed_identity_ids != null && length(var.managed_identity_ids) > 0 ? "SystemAssigned, UserAssigned" : "SystemAssigned"
    identity_ids = var.managed_identity_ids != null && length(var.managed_identity_ids) > 0 ? var.managed_identity_ids : null
  }

  source_image_id = var.os_image_id

  //noinspection ConflictingProperties (only set if var.os_image_id is null so there is no conflict)
  dynamic "source_image_reference" {
    for_each = var.os_image_id == null ? [1] : []
    content {
      publisher = local.resolved_image.publisher
      sku       = local.resolved_image.sku
      offer     = local.resolved_image.offer
      version   = local.resolved_image.version
    }
  }

  dynamic "plan" {
    for_each = var.vm_plan_name != null ? [1] : []
    content {
      publisher = local.resolved_image.publisher
      product   = local.resolved_image.offer
      name      = var.vm_plan_name
    }
  }
  provision_vm_agent = true

  boot_diagnostics {
    storage_account_uri = data.azurerm_storage_account.log_stg_account.primary_blob_endpoint
  }

  os_disk {
    name                   = "${var.vm_name}-osdisk"
    caching                = "ReadWrite"
    disk_size_gb           = var.os_disk_size_gb
    storage_account_type   = var.os_disk_sku
    disk_encryption_set_id = var.disk_encryption_set_id
  }

  admin_username                  = var.admin_username
  admin_password                  = var.admin_ssh_public_key == null ? var.admin_password : null
  disable_password_authentication = var.admin_ssh_public_key != null

  dynamic "admin_ssh_key" {
    for_each = var.admin_ssh_public_key != null ? [1] : []
    content {
      public_key = var.admin_ssh_public_key
      username   = var.admin_username
    }
  }

  # Set the allow extension operations property
  allow_extension_operations = true

  tags = var.tags

  # For import ignore this setting. Older VM's have this set to NULL and any attempt to update it has failed so far
  lifecycle {
    ignore_changes = [allow_extension_operations]
  }
}

resource "azurerm_managed_disk" "data_disk" {
  for_each               = var.data_disks
  name                   = "${var.vm_name}-${each.key}"
  location               = var.vm_location
  resource_group_name    = var.data_disk_resource_group_name_override != null ? var.data_disk_resource_group_name_override : var.vm_resource_group_name
  storage_account_type   = each.value.sku
  create_option          = "Empty"
  disk_size_gb           = each.value.size_gb
  disk_encryption_set_id = var.disk_encryption_set_id
  zones                  = var.availability_zone == null ? null : [var.availability_zone]

  tags = var.tags

  // Azure Backup and Azure Site Recovery can change the CreationData of disks after restoring from backup
  // or failing over and back. The CreationData cannot change was the disk is created so there's no reason for us
  // to check for changes as it will try to delete and re-create the disk which is probably not what we want
  lifecycle {
    ignore_changes = [
      create_option,
      source_uri,
      source_resource_id
    ]
  }
}

resource "azurerm_virtual_machine_data_disk_attachment" "data_disk_attachment" {
  for_each           = var.data_disks
  caching            = each.value.caching
  lun                = each.value.lun
  managed_disk_id    = azurerm_managed_disk.data_disk[each.key].id
  virtual_machine_id = local.is_windows ? azurerm_windows_virtual_machine.windows_vm[0].id : azurerm_linux_virtual_machine.linux_vm[0].id

  lifecycle {
    ignore_changes = [
      create_option
    ]
  }
}

resource "azurerm_network_interface" "primary_network_interface" {
  name                = "${var.vm_name}-vmnic"
  location            = var.vm_location
  resource_group_name = var.network_interface_resource_group_name_override != null ? var.network_interface_resource_group_name_override : var.vm_resource_group_name
  tags                = var.tags

  ip_configuration {
    name                          = "ipconfig1"
    subnet_id                     = var.network_subnet_id
    private_ip_address_allocation = var.network_ip_address == "" ? "Dynamic" : "Static"
    private_ip_address            = var.network_ip_address == "" ? null : var.network_ip_address
  }

  enable_accelerated_networking = var.enable_accelerated_networking
}

resource "azurerm_virtual_machine_extension" "monitoring_extension" {
  count                      = var.install_monitoring_extension ? 1 : 0
  name                       = "monitoringagent"
  virtual_machine_id         = local.is_windows ? azurerm_windows_virtual_machine.windows_vm[count.index].id : azurerm_linux_virtual_machine.linux_vm[count.index].id
  publisher                  = "Microsoft.EnterpriseCloud.Monitoring"
  type                       = local.is_windows ? "MicrosoftMonitoringAgent" : "OmsAgentForLinux"
  type_handler_version       = local.is_windows ? "1.0" : "1.8"
  auto_upgrade_minor_version = true
  tags                       = var.tags
  settings                   = <<SETTINGS
    {
      "workspaceId": "${var.log_analytics.workspace_id}"
    }
  SETTINGS
  protected_settings         = <<SETTINGS
    {
      "workspaceKey": "${var.log_analytics.workspace_key}"
    }
  SETTINGS
}

resource "azurerm_virtual_machine_extension" "domain_join_extension" {
  count                      = local.is_windows && var.ad_domain_join ? 1 : 0
  name                       = "joindomain"
  virtual_machine_id         = local.is_windows ? azurerm_windows_virtual_machine.windows_vm[count.index].id : azurerm_linux_virtual_machine.linux_vm[count.index].id
  publisher                  = "Microsoft.Compute"
  type                       = "JsonADDomainExtension"
  type_handler_version       = "1.3"
  auto_upgrade_minor_version = true
  tags                       = var.tags
  settings                   = <<SETTINGS
    {
      "Name": "${var.ad_domain}",
      "User": "${var.ad_domain}\\${var.ad_join_user}",
      "OUPath": "OU=Azure,OU=Workstations,OU=_MRM,DC=mcjunkinredman,DC=com",
      "Restart": "true",
      "Options": "3"
    }
  SETTINGS
  protected_settings         = <<SETTINGS
    {
      "Password": "${var.ad_join_pass != "" ? var.ad_join_pass : data.azurerm_key_vault_secret.domain_join_secret.value}"
    }
  SETTINGS
  depends_on                 = [azurerm_virtual_machine_extension.monitoring_extension]
}

resource "azurerm_virtual_machine_extension" "diagnostics_extension" {
  count                      = var.diag_install_extension ? 1 : 0
  name                       = local.is_windows ? "Microsoft.Insights.VMDiagnosticsSettings" : "Microsoft.Insights.VMDiagnosticsSettings-Linux"
  virtual_machine_id         = local.is_windows ? azurerm_windows_virtual_machine.windows_vm[count.index].id : azurerm_linux_virtual_machine.linux_vm[count.index].id
  publisher                  = "Microsoft.Azure.Diagnostics"
  type                       = local.is_windows ? "IaasDiagnostics" : "LinuxDiagnostic"
  type_handler_version       = local.is_windows ? "1.5" : "3.0"
  auto_upgrade_minor_version = true
  tags                       = var.tags
  settings = templatefile("${path.module}/templates/diagnostic_settings_${local.is_windows ? "windows" : "linux"}.json",
    {
      storage_account_name = var.diag_log_storage_account_name,
      vm_resource_id       = local.is_windows ? azurerm_windows_virtual_machine.windows_vm[count.index].id : azurerm_linux_virtual_machine.linux_vm[count.index].id
    }
  )
  protected_settings = templatefile("${path.module}/templates/diagnostic_protected_settings_${local.is_windows ? "windows" : "linux"}.json",
    {
      storage_account_name = var.diag_log_storage_account_name,
      storage_secret       = local.is_windows ? data.azurerm_storage_account.log_stg_account.primary_access_key : var.diag_log_storage_account_sas_token,
    }
  )
  depends_on = [azurerm_virtual_machine_extension.monitoring_extension]
}

resource "azurerm_dev_test_global_vm_shutdown_schedule" "auto_shutdown_schedule" {
  count                 = var.auto_shutdown && var.tags["environmentType"] != "prod" ? 1 : 0
  enabled               = true
  daily_recurrence_time = "1900"
  timezone              = "Eastern Standard Time"
  virtual_machine_id    = join("", concat(azurerm_windows_virtual_machine.windows_vm[*].id, azurerm_linux_virtual_machine.linux_vm[*].id))
  location              = var.vm_location
  tags                  = var.tags

  notification_settings {
    enabled = false
  }
}

resource "azurerm_virtual_machine_extension" "chef_custom_script_extension" {
  count                      = var.chef_install_extension ? 1 : 0
  name                       = "ChefBootstrapCustomScript"
  publisher                  = local.is_windows ? "Microsoft.Compute" : "Microsoft.Azure.Extensions"
  type                       = local.is_windows ? "CustomScriptExtension" : "CustomScript"
  type_handler_version       = local.is_windows ? "1.10" : "2.1"
  auto_upgrade_minor_version = true
  virtual_machine_id         = local.is_windows ? azurerm_windows_virtual_machine.windows_vm[0].id : azurerm_linux_virtual_machine.linux_vm[0].id

  settings = jsonencode({
    timestamp = tonumber(local.chef_script_retry_trigger)
    fileUris  = local.is_windows ? [var.chef_bootstrap_script.windows_script_uri] : [var.chef_bootstrap_script.linux_script_uri]
  })

  protected_settings = jsonencode({
    commandToExecute = local.is_windows ? local.chef_install_script.windows : local.chef_install_script.linux
    managedIdentity  = {}
  })

  tags = var.tags

  # Ensure this extension processes last
  depends_on = [
    azurerm_virtual_machine_extension.monitoring_extension,
    azurerm_virtual_machine_extension.diagnostics_extension,
    azurerm_virtual_machine_extension.domain_join_extension,
    azuread_group_member.vm_group_member,
    azurerm_virtual_machine_data_disk_attachment.data_disk_attachment
  ]
}

# There is a bug when there is no identity on the VM (e.g. removed outside of Terraform or during import), then references to the
# principal_id will fail. Terraform will consider it null during static validation. The only workaround we've found so far from this is
# to manually enable managed identity on the VM prior to performing Terraform operations.
# This is related to https://github.com/terraform-providers/terraform-provider-azurerm/issues/4532
# We try to work around that issue with a bunch of ternary operators in our local.vm_principal_id, but even if we prevent
# the "Invalid index" error Terraform still fails with "Error: "member_object_id": required field is not set"
resource "azuread_group_member" "vm_group_member" {
  count            = length(var.azuread_group_ids)
  group_object_id  = var.azuread_group_ids[count.index]
  member_object_id = local.vm_principal_id
}

resource "azuread_group_member" "vm_group_member_chef" {
  count            = var.chef_install_extension ? 1 : 0
  group_object_id  = data.azuread_group.storage_readers_group.id
  member_object_id = local.vm_principal_id
}